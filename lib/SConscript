Import("env")
Import("conf")
Import("objs")

import os
import git
import tqdm
from colorama import Fore, Style
import subprocess

env.Replace(LIB_DEFAULT_REPO_DIR = "src/")

def stamp(fn):
	with open(fn, 'w') as f:
		pass

class git_clone_progress(git.RemoteProgress):
	def __init__(self):
		super().__init__()
		# self._bar = tqdm.tqdm()

	def update(self, op_code, cur_count, max_count=None, message=''):
		pass
		# self._bar.total = max_count
		# self._bar.n = cur_count
		# self._bar.set_description(message)
		# self._bar.refresh()
		#  print(op_code)


def Git(self, url, dir=env['LIB_DEFAULT_REPO_DIR'], branch=None):
	if os.path.exists('.downloaded.stamp'):
		return

	print(f'{Fore.BLUE}{Style.BRIGHT}Cloning git repo{Style.RESET_ALL} {url} into {dir}...')

	try:
		repo = git.Repo.clone_from(url, dir, progress=git_clone_progress(), branch=branch, depth=1)
	except:
		print(f'..{Fore.RED}{Style.BRIGHT}failed{Style.RESET_ALL}')
		return
	stamp('.downloaded.stamp')



env.AddMethod(Git)

def Patch(self, ppatch, dir=env['LIB_DEFAULT_REPO_DIR']):
	if os.path.exists('.patched.stamp'):
		return

	if type(ppatch) is not list:
		ppatch = [ppatch]

	r = git.Repo(dir)
	for p in ppatch:
		# The patch file name is library SConscript file relative, but Git needs it as repository-relative
		abspatch = os.path.abspath(p)
		print(f'{Fore.BLUE}{Style.BRIGHT}Patching{Style.RESET_ALL} with {p}...')

		try:
			r.git.apply([str(abspatch)])

		except git.GitCommandError:
			print(f'..{Fore.RED}{Style.BRIGHT}failed{Style.RESET_ALL}')
			return

	stamp('.patched.stamp')

env.AddMethod(Patch)


def Make(self, target, cwd='.'):
	if os.path.exists('.compiled.stamp'):
		return

	print(f'{Fore.BLUE}{Style.BRIGHT}Compiling{Style.RESET_ALL} library target {target} (in {str(cwd)})...')

	r = subprocess.run(['make', target], cwd=str(cwd), stdout=subprocess.PIPE)
	print(r.stdout.decode())
	
	stamp('.compiled.stamp')

env.AddMethod(Make)


for d in next(os.walk("."))[1]:
	f = os.path.join(d, "SConscript")
	if os.path.isfile(f):
		SConscript(f)

